{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GalaxyKickStart","text":"<p>GalaxyKickStart is an Ansible playbook designed for installing, testing, deploying and  maintaining production-grade Galaxy server instances. GalaxyKickStart playbook code is available in GitHub. </p> <p>In the basic configuration, the deployed Galaxy servers include:</p> <ul> <li>a <code>postgresql</code> server as database backend </li> <li>a <code>uwsgi</code> Web Server Gateway Interface</li> <li>a <code>Slurm</code> job manager</li> <li>a <code>nginx</code> web proxy</li> <li>a <code>proftpd</code> FTP server</li> <li>the service manager <code>supervisor</code></li> </ul>"},{"location":"GKS2slurm/","title":"GKS2slurm","text":""},{"location":"GKS2slurm/#unstable-development","title":"Unstable development","text":"<p>GKS2slurm is a playbook that is played to install a multinode slurm cluster over a GalaxyKickStart single-node installation. The playbook GKS2slurm <code>galaxyToSlurmCluster.yml</code> was tested with multiple virtual machines (VMs) in <code>Stratuslab</code>, <code>Google Cloud Engine (GCE)</code> and <code>Amazon Web Services (AWS)</code> clouds.</p>"},{"location":"GKS2slurm/#installation-of-a-galaxy-slurm-cluster-with-gks2slurm","title":"Installation of a Galaxy slurm cluster with GKS2slurm","text":""},{"location":"GKS2slurm/#step-1-install-a-galaxy-server-with-galaxykickstart","title":"Step 1: Install a Galaxy server with GalaxyKickStart","text":"<ul> <li> <p>Report to the Getting Started section of this manual for the basics of GalaxyKickStart installation</p> </li> <li> <p>install any GalaxyKickStart \"flavor\" by configuring the inventory file (in inventory_files folder) and the group_vars file (in the group_vars folder) of your choice. Flavors currently available are <code>kickstart</code>, <code>artimed</code> and <code>metavisitor</code> but other will come soon. Alternatively, you can build you own flavor by customizing a group_vars, extrafiles file and inventory file, which will install your Galaxy tools and workflows.</p> <p>in Step 1, the most important thing to keep track with is to configure your target machine with an extra volume</p> <p>Indeed GKS2slurm has be designed so that the Galaxy slurm cluster can accumulate large amount of data in the long term, which can be more easily shared with the cluster nodes and more importantly backed up.</p> <p>Thus in addition of all the adaptations you will do for your own purpose (tools, workflows, etc), edit the <code>group_vars/all</code> file and adapt the <code>galaxy_persistent_directory</code> variable to your extra volume which should be already formatted and mounted:</p> <p>Change</p> </li> </ul> <pre><code>#persistent data\ngalaxy_persistent_directory: /export # for IFB it's /root/mydisk, by default, /export\n</code></pre> <p>To</p> <pre><code>#persistent data\ngalaxy_persistent_directory: /pathto/mounted/extravolume\n</code></pre> <ul> <li>Having configured your GalaxyKickStart installation, import the extra roles (if not already done) <pre><code>ansible-galaxy install -r requirements_roles.yml -p roles\n</code></pre> and run the galaxy.yml playbook: <pre><code>ansible-playbook --inventory-file inventory_files/&lt;your_inventory_file&gt; galaxy.yml\n</code></pre></li> </ul>"},{"location":"GKS2slurm/#step-2-check-the-single-node-galaxy-installation","title":"Step 2: Check the single node Galaxy installation","text":"<p>If the playbook was run successfully, connect to your Galaxy instance through http and check that you can login (admin@galaxy.org:admin), and that tools and workflows are correctly installed.</p>"},{"location":"GKS2slurm/#step-3-moving-your-single-node-configuration-to-a-multinode-slurm-configuration","title":"Step 3: Moving your single node configuration to a multinode slurm configuration","text":"<ul> <li>Start as many compute nodes you want for the slurm cluster and gather information from each node:<ul> <li>IP address (all slurm nodes should must be accessible in the same network, ie nodes can be ping-ed from any nodes)</li> <li>hostname</li> <li>number of CPUs</li> <li>memory (in MB)</li> </ul> </li> </ul>"},{"location":"GKS2slurm/#step-3-1","title":"Step 3-1","text":"<p>Adapt the inventory file <code>slurm-kickstart</code> in the inventory_files folder. <pre><code>[slurm_master]\n# adapt the following line to IP address and ssh user of the slurm master node\n192.54.201.102 ansible_ssh_user=root ansible_ssh_private_key_file=\"~/.ssh/mysshkey\"\n\n[slurm_slave]\n# adapt the following lnes to IP addresses and ssu users of the slum slave nodes\n192.54.201.98 ansible_ssh_user=root ansible_ssh_private_key_file=\"~/.ssh/mysshkey\"\n192.54.201.99 ansible_ssh_user=root ansible_ssh_private_key_file=\"~/.ssh/mysshkey\"\n192.54.201.101 ansible_ssh_user=root ansible_ssh_private_key_file=\"~/.ssh/mysshkey\"\n</code></pre></p>"},{"location":"GKS2slurm/#step-3-2","title":"Step 3-2","text":"<p>Adapt the group_vars file <code>slurm_master</code> in the <code>group_vars</code> folder. This is done using the information gathered in step 3</p> <pre><code># nfs sharing\ncluster_ip_range: \"0.0.0.0/24\" # replace by your ip network range\n\n# slave node specifications, adapt to your set of slave nodes\nslave_node_dict:\n  - {hostname: \"slave-1\", CPUs: \"2\", RealMemory: \"7985\"}\n  - {hostname: \"slave-2\", CPUs: \"2\", RealMemory: \"7985\"}\n  - {hostname: \"slave-3\", CPUs: \"2\", RealMemory: \"7985\"}\n</code></pre>"},{"location":"GKS2slurm/#step-3-3","title":"Step 3-3","text":"<p>Adapt the group_vars file <code>slurm_slave</code> in the <code>group_vars</code> folder</p> <pre><code># adapt the following variable to the master slurm node IP address\nmaster_slurm_node_ip: \"192.54.201.102\"\n</code></pre>"},{"location":"GKS2slurm/#step-3-4","title":"Step 3-4","text":"<p>Run the playbook <code>galaxyToSlurmCluster.yml</code> playbook. from the GalaxyKickStart directory: <pre><code>ansible-playbook -i inventory_files/slurm-kickstart galaxyToSlurmCluster.yml\n</code></pre></p> <ul> <li>Note that if you configure multiple slave nodes without prior ssh key authentification, you can run the same command with the variable ANSIBLE_HOST_KEY_CHECKING put to False:</li> </ul> <pre><code>ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory_files/slurm-kickstart galaxyToSlurmCluster.yml\n</code></pre>"},{"location":"GKS2slurm/#checking-slurm-installation","title":"Checking slurm installation","text":"<p>Connect to your master node as root and type <code>sinfo</code> Refer to slurm documentation for more investigation/control</p>"},{"location":"GKSfromWorflows/","title":"GKSfromWorflows","text":""},{"location":"GKSfromWorflows/#unstable-development","title":"Unstable development","text":"<p>GKSfromWorflows uses the python script <code>scripts/galaxykickstart_from_workflow.py</code> to quickly generate a GalaxyKickStart use case from one or several workflow files (<code>.ga</code>, note that these files must have been generated with galaxy &gt;= release_16.04)</p>"},{"location":"GKSfromWorflows/#from-galaxykickstartscripts-run","title":"From <code>GalaxyKickStart/scripts</code>, run","text":"<pre><code>python galaxykickstart_from_workflow.py --help\n</code></pre> <p>Then</p> <pre><code>python galaxykickstart_from_workflow.py -w &lt;workflow1.ga&gt; &lt;workflow2.ga&gt; ... -l &lt;Panel_label&gt;\n</code></pre> <p>This creates:</p> <ul> <li>An inventory file <code>GKSfromWorkflow</code> in the <code>inventory_files</code> folder</li> <li>A group_vars file <code>GKSfromWorkflow</code> in the <code>group_vars</code> folder</li> <li>A folder <code>GKSfromWorkflow</code>in the folder <code>extra-files</code> which will contain a copy of the workflow1.ga, workflow2.ga, ... files, plus a <code>GKSfromWorkflow_tool_list.yml</code> file that contains a yml description of all tools used in the workflows.</li> </ul> <p>Note that running <code>galaxykickstart_from_workflow.py</code> overwrites these folders and files if they exist from a previous script run.</p>"},{"location":"GKSfromWorflows/#adapt-the-created-inventory-file","title":"Adapt the created inventory file","text":"<p>Before running ansible-playbook, you have just to adapt the <code>GKSfromWorkflow</code> inventory_file <code>inventory_files/GKSfromWorkflow</code> to your own network settings (the file is preconfigured for running locally ansible-playbook on your target machine).</p> <p>As usual, you may also tune the <code>group_vars/all</code> file.</p>"},{"location":"GKSfromWorflows/#run-the-playbook","title":"Run the playbook","text":"<pre><code>cd GalaxyKickStart\nansible-galaxy install -r requirements_roles.yml -p roles\nansible-playbook -i inventory_files/GKSfromWorkflow galaxy.yml\n</code></pre> <p>Check your running Galaxy instance after completion of the playbook. It contains the preinstalled tools as well as the workflow1, workflow2, etc....</p>"},{"location":"about/","title":"GalaxyKickStart","text":"<p>GalaxyKickStart is an Ansible playbook designed to deploy one or more production-ready Galaxy servers based on Ubuntu within ~30 minutes, and to maintain these servers.</p> <p>GalaxyKickStart can also install tools and workflows in the deployed Galaxy servers.</p>"},{"location":"about/#requirements","title":"Requirements","text":"<p>The Galaxykickstart playbook is tested in</p> <ul> <li>Ubuntu 16.04, 18.04 and 20.04,</li> <li>with ansible &gt;= 9.2.6,</li> <li>and a target machine pre-installed with Python 3.7.</li> </ul>"},{"location":"about/#target-environments","title":"Target environments","text":"<p>The GalaxyKickStart playbook is primarily tested (ci) in virtual machines using GitHub Actions workflows.</p> <p>ARTbio is also using the playbook to install and maintain its bare metal Galaxy servers or its virtual servers in Google Cloud Platform.</p> <p>Finally, GalaxyKickStart can be used to build your production-ready Docker image and a Galaxy Docker image is freely available using <code>docker pull artbio/galaxykickstart:18.04</code>.</p> <p>The GalaxyKickStart Ansible playbook is maintained by ARTbio platform and makes use of roles which have been developed by the Galaxy team.</p> <p>To ensure the GalaxyKickStart stability, these roles (listed below) are forked and maintained separately in ARTbio GitHub repositories (in the <code>galaxykickstart</code> branches).</p>"},{"location":"about/#list-of-dependency-roles-included-in-this-playbook","title":"List of dependency roles included in this playbook:","text":"<ul> <li>galaxy-os role</li> <li>natefoo-postgresql_objects</li> <li>ensure_postgresql_up</li> <li>galaxy role</li> <li>miniconda-role</li> <li>galaxy-extras role</li> <li>galaxy-trackster role</li> <li>galaxy-tools role</li> </ul>"},{"location":"available_roles/","title":"Available roles","text":"<p>ansible-postgresql-objects role</p> <p>ensure_postgresql_up role</p> <p>galaxy-os role </p> <p>miniconda role</p> <p>galaxy role </p> <p>galaxy-extras role </p> <p>ansible-trackster role</p> <p>galaxy-tools role </p>"},{"location":"available_variables/","title":"Available variables","text":"<p>Most of the available ansible variables used by the galaxykickstart playbook scripts <code>galaxy.yml</code> and <code>galaxy_tool_install.yml</code> can be found in the <code>group_vars/all</code> file and are reproduced below, with there default values:</p> <pre><code>GKS: true\ngalaxy_virtualenv_python: python3\nansible_python_interpreter: python3\nproxy_env: {}\ninstall_galaxy: true\ninstall_maintainance_packages: false\ngalaxy_manage_trackster: true\ngalaxy_create_user: true\n# Privilege separation mode switch\ngalaxy_separate_privileges: true\n# User that Galaxy runs as\ngalaxy_user: \"{{ galaxy_user_name }}\"\n# User that owns Galaxy code, configs, and virutalenv, and that runs `pip install` for dependencies\ngalaxy_privsep_user: \"{{ galaxy_user_name }}\"\ngks_run_data_managers: false\ngalaxy_hostname: \"{{ inventory_hostname }}\"\nnginx_galaxy_location: \"\"\n# galaxy_become_users: {} # for compatibility with ansible.galaxy. as doc seems to say\npip_virtualenv_command: virtualenv\ngalaxy_user_name: galaxy\ngalaxy_user_gid: 1450\ngalaxy_user_uid: 1450\npostgres_user_uid: 1550\npostgres_user_gid: 1550\ngalaxy_server_dir: /home/{{ galaxy_user_name }}/{{ galaxy_user_name }}\ngalaxy_venv_dir: \"{{ galaxy_server_dir }}/.venv\"\ngalaxy_local_tools_dir: \"{{ galaxy_server_dir }}/tools\"\ngalaxy_data: /home/{{ galaxy_user_name }}/{{ galaxy_user_name }}\ngalaxy_config_dir: \"{{ galaxy_server_dir }}/config\"\ngalaxy_database: /home/galaxy_database\ngalaxy_db: postgresql://{{ galaxy_user_name }}:{{ galaxy_user_name }}@localhost:5432/galaxy?client_encoding=utf8\ngalaxy_git_repo: https://github.com/galaxyproject/galaxy.git\ngalaxy_changeset_id: release_20.05\ngalaxy_reports_config_file: \"{{ galaxy_config_dir }}/reports.yml.sample\"  # Change this to \"{{ galaxy_config_dir }}/reports.ini.sample\" for galaxy &lt; 17.09\ngalaxy_admin: admin@galaxy.org\ngalaxy_admin_pw: artbio2020\n# use the most recent PBKDF2 function for galaxy (and proftpd) authentication\nuse_pbkdf2: true\nproftpd_sql_auth_type: PBKDF2\nproftpd_files_dir: \"{{ galaxy_data }}/database/ftp\"\npostgresql_version: \"{{ '9.3' if ansible_distribution=='Ubuntu'\n                                 and ansible_distribution_version is version('15.04', '&lt;=')\n                              else '9.5' if ansible_distribution=='Ubuntu'\n                                            and ansible_distribution_version is version('17.04', '&lt;')\n                              else '10' if ansible_distribution=='Ubuntu'\n                                           and ansible_distribution_version is version('18.04', '&lt;=')\n                              else '12' if ansible_distribution=='Ubuntu'\n                                           and ansible_distribution_version is version('20.04', '&lt;=')\n                              else '9.4' if ansible_distribution=='Debian'\n                                            and ansible_distribution_version is version('8.0', '&gt;=') }}\"\nsupervisor_postgres_database_path: /var/lib/postgresql/{{ postgresql_version }}/main\nsupervisor_postgres_database_config: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf\nsupervisor_postgres_options: \"-D {{ supervisor_postgres_database_path }} -c \\\"config_file={{ supervisor_postgres_database_config }}\\\"\"\n\n# set to 'no' to skip reinitialisation and clear docker images (docker must then be already installed)\nconfigure_docker: yes\ngalaxy_extras_apt_package_state: present\ninstall_apparmor: false\ntool_dependency_dir: /home/{{ galaxy_user_name }}/tool_dependencies\nshed_tools_dir: \"{{ galaxy_server_dir }}/../shed_tools\"\ntool_data_dir: \"{{ galaxy_server_dir  }}/tool-data\"\ngalaxy_mutable_data_dir: \"{{ galaxy_server_dir  }}/database\"\nminiconda_python: 3\nminiconda_version: \"4.6.14\"\nminiconda_installer_checksum: \"\"\nminiconda_prefix: \"{{ tool_dependency_dir }}/_conda\"\nminiconda_manage_dependencies: False\n\nadditional_files_list:\n  - { src: \"extra-files/tool_sheds_conf.xml\", dest: \"{{ galaxy_config_dir }}\" }\n\nsupervisor_env_vars:\n    # Use pre-exsting env vars if they are defined\n    - export IP_ADDRESS=${IP_ADDRESS:-`curl --silent icanhazip.com`}\n    - export MASQUERADE_ADDRESS=${MASQUERADE_ADDRESS:-$IP_ADDRESS}\n    - export GALAXY_GID=\"${GALAXY_GID:-{{ galaxy_user_gid }}}\"\n    - export GALAXY_UID=\"${GALAXY_UID:-{{ galaxy_user_uid }}}\"\n    - export NATIVE_SPEC=\"${NATIVE_SPEC:---ntasks=`/usr/bin/nproc` --share}\"\n    - export NGINX_GALAXY_LOCATION=\"${NGINX_GALAXY_LOCATION:-{{ nginx_galaxy_location }}}\"\n    - export GALAXY_CONFIG_FTP_UPLOAD_SITE=\"${GALAXY_CONFIG_FTP_UPLOAD_SITE:-ftp://$IP_ADDRESS}\"\n    - export GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE=\"${GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE:-$NGINX_GALAXY_LOCATION/_x_accel_redirect}\"\n    - export GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE=\"{$GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE:-$NGINX_GALAXY_LOCATION/_x_accel_redirect}\"\n    - export GALAXY_CONFIG_CONDA_AUTO_INIT=\"${GALAXY_CONFIG_CONDA_AUTO_INIT:-True}\"\n\n# galaxy role variables\n\n#persistent data\ngalaxy_persistent_directory: /export # default value\ngalaxy_manage_mutable_setup: yes\ngalaxy_mutable_config_dir: \"{{ galaxy_config_dir }}\"\ngalaxy_config_style: \"yaml\"\ngalaxy_config_file: \"{{ galaxy_config_dir }}/galaxy.yml\"\n#other vars\ngalaxy_manage_database: yes\n# does not actually fetch eggs if galaxy uses pip\ngalaxy_fetch_eggs: yes\ngalaxy_vcs: git\ngalaxy_force_checkout: yes\n# galaxykickstart adopts the yml standard for config file `galaxy.yml`\ngalaxy_config:\n  \"uwsgi\":\n    # other uwsgi option are defaulted in ansible-galaxy-os role\n    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()\n    # warning the above line should be dropped when prefixing\n    # upon guide-lines in  https://docs.galaxyproject.org/en/latest/admin/nginx.html\n    logfile-chmod: 644\n  'galaxy':\n    filter-with: proxy-prefix\n    prefix: \"{{ nginx_galaxy_location }}\" # this is not clear from the galaxy.yml.sample which in addition is not consistent with https://docs.galaxyproject.org/en/latest/admin/nginx.html\n    admin_users: \"{{ galaxy_admin }}\"\n    database_connection: \"{{ galaxy_db }}\"\n    tool_dependency_dir: \"{{ tool_dependency_dir }}\"\n    ftp_upload_dir: \"{{ proftpd_files_dir }}\"\n    ftp_upload_site: \"ftp://{{ ipify_public_ip }}\"\n    allow_user_dataset_purge: True\n    allow_user_impersonation: True\n    enable_quotas: True\n    allow_user_deletion: True\n    allow_library_path_paste: True\n    tool_sheds_config_file: \"{{ galaxy_config_dir }}/tool_sheds_conf.xml\"\n    static_enabled: False\n    watch_tool_data_dir: True\n    use_pbkdf2: \"{{ use_pbkdf2 }}\"\n    len_file_path: \"{{ galaxy_config_dir }}/len\"\n    nginx_x_accel_redirect_base: /_x_accel_redirect\n    interactive_environment_plugins_directory: config/plugins/interactive_environments\n    visualization_plugins_directory: config/plugins/visualizations\n    # interactive environments - set dynamic_proxy_manage to true #\n    dynamic_proxy_manage: false\n    dynamic_proxy_session_map: database/session_map.sqlite\n    dynamic_proxy_bind_port: 8800\n    dynamic_proxy_bind_ip: 0.0.0.0\n    dynamic_proxy_debug: true\n    dynamic_proxy_external_proxy: true\n    dynamic_proxy_prefix: gie_proxy\n\n# galaxy-extras role variables\ngalaxy_uwsgi_static_conf: true\ngalaxy_web_processes: 2\ngalaxy_handler_processes: 4\nsupervisor_slurm_config_dir: \"{{ galaxy_data }}\"\ngalaxy_root: \"{{ galaxy_server_dir }}\"\ngalaxy_log_dir: \"{{ galaxy_data }}\"\ngalaxy_database_connection: \"{{ galaxy_db }}\"\ngalaxy_errordocs_dest: \"/usr/share/nginx/html\"\ngalaxy_extras_config_scripts: true\ngalaxy_extras_install_packages: true\ngalaxy_extras_config_nginx: true\ngalaxy_extras_config_supervisor: true\ngalaxy_extras_config_proftpd: true\ngalaxy_extras_config_uwsgi: false\ngalaxy_extras_config_galaxy_job_metrics: false\ngalaxy_extras_config_slurm: true\ngalaxy_extras_config_galaxy_root: true\nsupervisor_manage_nginx: true\nsupervisor_manage_proftp: true\nsupervisor_manage_slurm: true\nsupervisor_manage_reports: true\nsupervisor_manage_docker: false\nproftpd_nat_masquerade: false\nsupervisor_proftpd_autostart: true\ngalaxy_extras_config_cvmfs: false\n\n# To enable interactive environments set the following 3 variables to true\ngalaxy_extras_config_ie_proxy: false\nsupervisor_manage_ie_proxy: false\nsupervisor_ie_proxy_autostart: false\n# specific ie for ipython and rstudio\ngalaxy_extras_ie_fetch_jupyter: false\ngalaxy_extras_ie_jupyter_image: quay.io/bgruening/docker-jupyter-notebook:17.09\ngalaxy_extras_ie_fetch_rstudio: false\ngalaxy_extras_ie_rstudio_image: artbio/rstudio-notebook:latest\n\n\n# galaxy-tools role variables\ngalaxy_tools_install_tools: true\ngalaxy_tools_admin_user: \"{{ galaxy_admin }}\"\ngalaxy_tools_admin_username: admin\ngalaxy_tools_admin_user_password: \"{{ galaxy_admin_pw }}\"\ngalaxy_tools_admin_user_preset_api_key: true\ndefault_admin_api_key: artbio2020\ngalaxy_tools_api_key: \"{{ default_admin_api_key }}\"\ngalaxy_tools_create_bootstrap_user: true\ngalaxy_tools_delete_bootstrap_user: false\ngalaxy_tools_galaxy_instance_url: http://\"{{ galaxy_hostname }}{{ nginx_galaxy_location }}\"/\ngalaxy_tools_tool_list_files: []\ngalaxy_tools_install_workflows: true\ngalaxy_tools_workflows: []\n</code></pre>"},{"location":"customizations/","title":"Customising the playbook","text":"<p>We strongly encourage users to read the ansible inventory documentation first.</p> <p>Most settings should be editable without modifying the playbook directly, instead variables can be set in group_vars and host vars.</p> <p>The playbook comes with an example inventory file <code>example_hosts</code>. <pre><code>[artimed]\nlocalhost ansible_ssh_user=\"root\" ansible_ssh_private_key_file=\"~/.ssh/id_rsa\"\n[travis_bioblend]\nlocalhost ansible_connection=local\n[aws]\n# Put you aws IP and key here to make FTP work in the default VPC.\n# If you want further group-specific variables, put the host in these groups as well [e.g artimed].\n</code></pre> <code>[artimed]</code>, <code>[travis_bioblend]</code> and <code>[aws]</code> are predefined groups. Any host (here we only have localhost) that is added to one or multiple groups will have the corresponding group variables applied. Group variables are defined in <code>group_vars/[name of the group]</code> and default variables are found in  <code>group_vars/all</code>. All variables defined in <code>group_vars/all</code> are overwritten in <code>group_vars/[name of the group]</code>.  </p> <p>For instance the variable <code>proftpd_nat_masquerade</code> is set to <code>false</code> in <code>group_vars/all</code>, while hosts in the <code>[aws]</code> group apply the <code>[aws]</code> group variables which set <code>proftpd_nat_masquerade</code> to true, so that hosts in the aws group will have this aws-specific setting applied. Any combination of groups may be used.</p> <p>If you want to apply any of the changes you made to the variables you need to run the playbook again, making sure that the host you are targeting is in the right group. The simplest way to do so is to use an inventory file that only contains the group and the host you wish to target. If this is for example the group metavisitor, and you target the host localhost, your inventory file should look like this:</p> <p><pre><code>[metavisitor]\nlocalhost\n</code></pre> You can then run the playbook as usual: <pre><code>ansible-playbook --inventory-file=&lt;your_inventory_file&gt; galaxy.yml\n</code></pre></p>"},{"location":"customizations/#important-variables","title":"Important variables","text":"<p>We aimed for this playbook to be reusable. We therefore made most variables configurable. The <code>group_vars/all</code> file contains the variables we have chosen as defaults. You may override them either in this file or you can use ansible group variables to selectively set the variables for certain hosts/groups. See the ansible documentation about group variables for details.</p> <p>These most important variables are:</p> <ul> <li> <p><code>ansible_ssh_user</code>: The login name used to access the target.</p> </li> <li> <p><code>ansible_ssh_private_key_file</code>: The ssh private key used to access the target.</p> </li> <li> <p><code>install_galaxy</code>: True for install a Galaxy server instance.</p> </li> <li> <p><code>galaxy_user_name</code>: The Operating System user name for galaxy process.</p> </li> <li> <p><code>galaxy_server_dir</code>: The home of Operating System user for galaxy process.</p> </li> <li> <p><code>galaxy_admin</code>: The admin galaxy user.</p> </li> <li> <p><code>galaxy_admin_pw</code>: The admin galaxy password.</p> </li> <li> <p><code>default_admin_api_key</code>: The api key for tool installation and download reference genomes throught galaxy data managers. To be removed in production.</p> </li> <li> <p><code>galaxy_tool_list</code>: The files that constants the list of tools to be installed.</p> </li> <li> <p><code>galaxy_data</code>: The persistent directory where the galaxy config and database directories will be installed or will be recovered.</p> </li> <li> <p><code>galaxy_database</code>: The persistent directory where postgresql will be installed or will be recovered.</p> </li> <li> <p><code>galaxy_db</code>: Connection string for galaxy-postgresql.</p> </li> <li> <p><code>galaxy_changeset_id</code>: The release of Galaxy to be installed (master, dev or release_YY_MM).</p> </li> </ul>"},{"location":"docker/","title":"Building and deploying galaxy-kickstart in docker","text":""},{"location":"docker/#requirements","title":"Requirements","text":"<p>You need to have docker installed and configured for your user.</p> <p>The repository comes with a Dockerfile that can be used to build a Docker image. This image is already available at hub.docker.com and can be pulled using the command <code>docker pull artbio/galaxykickstart:18.04</code>.</p>"},{"location":"docker/#building-a-galaxykickstart-docker-image","title":"Building a GalaxyKickstart Docker image","text":"<p>If you wish to adapt GalaxyKickStart to build a Docker image adapted to your needs, you will have to customise the Dockerfile (<code>Dockerfile.galaxykickstart-base</code>) by updating the inventory file <code>inventory_files/docker</code> and its dependencies <code>group_vars/docker</code> and <code>extra-files/docker/</code>. Then, run the following command:</p> <pre><code>docker build -t mygalaxykickstart .\n</code></pre>"},{"location":"docker/#running-the-available-docker-image-from-the-dockerhub","title":"Running the available docker image from the dockerhub","text":"<p>Pull the docker image: <pre><code>docker pull artbio/galaxykickstart:18.04\n</code></pre></p> <p>Start the image and serve it on port 8080 of your local machine in the standard docker way: <pre><code>CID=`docker run -d -p 8080:80 artbio/galaxykickstart:18.04`\n</code></pre></p> <p><code>-p 8080:80</code> will forward requests to nginx inside the container running on port 80.</p>"},{"location":"docker/#runtime-changes-to-pre-built-docker-images","title":"Runtime changes to pre-built docker images","text":"<p>If you wish to reach the container on a subdirectory, add <code>-e NGINX_GALAXY_LOCATION=\"/my-subdirectory\"</code> to the docker call  and galaxy will be served at <code>http://127.0.0.1:8080/my-subdirectory</code>.</p> <p>We recommend changing the default admin user as well, so the command becomes: <pre><code>CID=`docker run -d -e NGINX_GALAXY_LOCATION=\"/my-subdirectory\" \\\n     -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr \\\n     -p 8080:80 artbio/galaxykickstart:18.04`\n</code></pre></p>"},{"location":"docker/#commit-changed-containers-to-new-images","title":"Commit changed containers to new images","text":"<p>As with standard docker containers, you can change, tag and commit running containers when you have configured them to your likings.</p> <p>Commit the changes to my-new-image: <pre><code>docker commit $CID my-new-image\n</code></pre> Stop and remove the original container: <pre><code>docker stop $CID &amp;&amp; docker rm $CID\n</code></pre> Start the new container: <pre><code>CID=`docker run -d -e NGINX_GALAXY_LOCATION=\"/my-subdirectory\" \\\n     -e GALAXY_CONFIG_ADMIN_USERS=admin@artbio.fr \\\n     -p 8080:80 my-new-image`\n</code></pre></p>"},{"location":"docker/#persisting-to-disk","title":"Persisting to disk","text":"<p>All changes made to the container are by default ephemeral. If you remove the container, the changes are gone. To persist data, including the postgresql database, galaxy's config files and your user galaxy data, mount a Volume into the containers /export folder. Due to the persistance mechanism (we use bind-mounts inside the container), you need to privilege the container. Assuming you would like to mount your local <code>/data</code> folder, run <pre><code>CID=`docker run -d --privileged \\\n     -v /data:/export \\\n     -p 8080:80\n     artbio/galaxykickstart:18.04`\n</code></pre> This will run through the persistence tags of the galaxy.yml and export the required files to /export (now on your machine's /data).</p> <p>From the new location the files are being bind-mounted back into their original location.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#why-does-the-playbook-fail","title":"Why does the playbook fail?","text":"<p>Most generally, the playbook fails because of environment issues in local or remote host.</p> <p>Make sure that you use ansible version &gt;=<code>2.9.6</code> in a python3 environment, that your ansible targets are under ubuntu 16.04, 18.04 or 20.04 (support to ubuntu 14.04 is dropped). Ensure also that the ssh connection ansible is relying on is appropriately specified in you inventory file (whether your run ansible locally or remotely), and that you have the root rights.</p> <p>You can check your ansible version by typing:</p> <pre><code>ansible --version\n</code></pre>"},{"location":"faq/#what-is-the-username-and-password-of-the-galaxy-admin-account","title":"What is the username and password of the galaxy admin account ?","text":"<p>Username and password of the galaxy account are controlled by the variables <code>galaxy_admin</code> and <code>galaxy_admin_pw</code> and default to <code>admin@galaxy.org</code> and <code>artbio2020</code> (Defaults are defined in group_vars/all). This should be changed in the group or host variables for the host you are working on. If you have a host in the <code>mygroup</code> group, you can edit group_vars/my_group and set</p> <pre><code>galaxy_admin: new_admin@email.com\ngalaxy_admin_pw: new_password\n</code></pre> <p>As with each change, run the playbook again.</p>"},{"location":"faq/#how-can-i-set-up-galaxykickstart-behind-a-proxy","title":"How can I set up GalaxyKickStart behind a proxy?","text":"<p>Many commandline utilities can be configured to use a proxy by setting the <code>http_proxy</code> and <code>https_proxy</code> environment variables. Tasks launched by ansible will only see these environment variables if ansible sets these variables for the task. We have included a global <code>proxy_env</code> variable in the galaxy.yml playbook. You can set the content of this variable in your inventory or group variables  (See Customizing the playbook for details on how to define variable). To use the proxy at http://proxy.bos.example.com:8080 define the variable <code>proxy_env</code> like so:</p> <pre><code>proxy_env:\n  http_proxy: http://proxy.bos.example.com:8080\n  https_proxy: http://proxy.bos.example.com:8080\n  no_proxy: localhost,127.0.0.0,127.0.1.1,127.0.1.1,local.home\n</code></pre> <p>Adresses that should not be contacted through a proxy should be listed in the <code>no_proxy</code> variable. An example can be found in group_vars/proxy.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#1-requirements-on-the-target-machine-where-ansible-will-deploy-galaxykickstart","title":"1. Requirements on the target machine (where ansible will deploy GalaxyKickStart)","text":"<ul> <li>Ubuntu 16.04, 18.04 or 20.04.</li> </ul> Note <p>Other systems (eg, debian) may work but they are not tested for the GalaxyKickStart development.</p> <ul> <li>Python &gt;= 3.6</li> </ul> Note <p>If this requirement is not satisfied, Ansible will try to install Python 3 on the target machine</p>"},{"location":"getting_started/#2-requirements-on-the-ansible-machine","title":"2. Requirements on the Ansible machine","text":"<ul> <li>Ansible Whether used remotely or locally, the Ansible version must be &gt;= 2.9.6</li> </ul> Note <p>Ansible uses ssh to send its commands. Thus, Ansible can be installed remotely (ie, on a machine that will not contain the Galaxy server at the end of the deployment), or locally (ie on the machine that will contain the Galaxy server, also called the target machine in this tutorial). In the latest case, ssh is used locally on the localhost 127.0.0.1 to chanel the commands sent by Ansible.</p> <p>Ansible may be installed using pip <pre><code>pip install ansible==2.9.2\n</code></pre> or apt <pre><code>sudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ansible/ansible\nsudo apt-get update\nsudo apt-get install ansible\n</code></pre></p> <ul> <li>git</li> </ul> Note <p>To clone the GalaxyKickStart GitHub repository</p>"},{"location":"getting_started/#3-getting-the-playbook","title":"3. Getting the playbook","text":"<p>GalaxyKickStart is hosted on github and uses a number of dependent Ansible roles that need to be downloaded as part of the installation step:</p> <pre><code>git clone https://github.com/artbio/galaxyKickstart.git\ncd GalaxyKickStart\nansible-galaxy install -r requirements_roles.yml -p roles\n</code></pre> <p>The playbooks scripts <code>galaxy.yml</code> and <code>galaxy_tool_install.yml</code> are in the galaxykickstart folder. <pre><code>CONTRIBUTORS.md         dockerfiles         group_vars          slurm_slave_node.yml\nDockerfile          docs                inventory_files         startup.sh\nDockerfile.galaxykickstart-base extra-files         mkdocs.yml          templates\nLICENSE.txt         galaxy.yml          requirements_roles.yml\nREADME.md           galaxyToSlurmCluster.yml    roles\nansible.cfg         galaxy_tool_install.yml     scripts\n</code></pre></p>"},{"location":"getting_started/#3-deploying-galaxy-kickstart-on-remote-machines","title":"3. Deploying galaxy-kickstart on remote machines.","text":"<p>Inside the <code>inventory_files</code> folder, you will find a number of inventory files. This is an example of inventory taken from the <code>artimed</code> inventory file.</p> <pre><code>[artimed]\nlocalhost ansible_connection=local\n\n# change to the line below if remote target host\n# &lt;remote host IP&gt; ansible_ssh_user=\"root\" ansible_ssh_private_key_file=\"&lt;path/to/your/private/key&gt;\"\n</code></pre> <p>Here <code>[artimed]</code> is a group, that contains a machine called localhost.</p> <p>The variables defined in <code>group_vars/artimed</code> will be applied to this host, in addition to, or overwriting, the variables defined in group_vars which apply to any host.</p> <p>In this example, Ansible is acting locally on the localhost target.</p> <p>If  instead you want to use Ansible remotely, replace <code>localhost ansible_connection=local</code> by <code>&lt;remote host IP&gt; ansible_ssh_user=\"root\" ansible_ssh_private_key_file=\"&lt;path/to/your/private/key&gt;\"</code></p> <p>Ansible will connect by ssh to the target <code>remote host IP</code>, using the ssh key in <code>path/to/your/private/key</code>.</p> <p>The user specified by <code>ansible_ssh_user=&lt;user&gt;</code> may be an other user than <code>root</code> but needs in any case to to have sudo rights.</p> <p>Then, run the plabook by typing: <pre><code>ansible-playbook --inventory-file inventory_files/&lt;your_inventory_file&gt; galaxy.yml\n</code></pre> Typically, you can test using: <pre><code>ansible-playbook -i inventory_files/galaxy-kickstart galaxy.yml\n</code></pre></p> <p>You can put multiple machines in your inventory file. If you run the playbook a second time, the process will be much faster, since steps that have already been executed will be skipped. Whenever you change a variable (see customizations) in group_vars/ or in group_vars/all, you will need to run the playbook again."},{"location":"getting_started/#4-deploying-galaxy-kickstart-on-specified-clouds","title":"4. Deploying galaxy-kickstart on specified clouds","text":"<p>Inside the repository you will find a file called <code>inventory_files/cloud</code>. This file serves as an example hosts file for how to deploy galaxy-kickstart on Google Compute Engine (GCE),  Amazon Web Services(aws), and Jetstream (OpenStack). Please note that the <code>ansible_user</code> variable in the file changes for each remote target. If you are wanting to use this playbook on a cloud other than the ones listed  below, you will need to update the inventory to add a new section header for the respective target. If this happens to be a cloud setup, make sure to add the section header under <code>[cloud_setup:children]</code>.</p> <p>Specifications for each remote target:</p> <ul> <li> <p>GCE</p> <ul> <li>Image needed to deploy galaxykickstart: <code>Ubuntu 18.04 LTS</code> &gt; <code>Ubuntu 20.04 LTS</code> &gt; <code>Ubuntu 16.04 LTS</code></li> <li>Inventory: <code>&lt;remote host IP&gt; anisble_ssh_user=\"ubuntu\" ansible_ssh_private_key_file=\"&lt;path/to/your/private/key&gt;\"</code></li> </ul> </li> <li> <p>AWS</p> <ul> <li>Image needed to deploy galaxykickstart: <code>Ubuntu Server 18.04 LTS (HVM), SSD Volume Type - ami-013f17f36f8b1fefb (64 bits x86) / ami-02ed82f3a38303e6f (64 bits Arm)</code></li> <li>Inventory: <code>&lt;target Amazon Web Services IP address&gt; ansible_ssh_user=\"ubuntu\" ansible_ssh_private_key_file=\"&lt;path/to/your/aws/private/key&gt;\"</code></li> </ul> </li> <li> <p>Jetstream (OpenStack)</p> <ul> <li>Image needed to deploy galaxykickstart on Jetstream:     <code>Ubuntu 18.04 LTS Development + GUI support + Docker (jetstream image id: 15ff25f6-6ac5-4c12-b6ce-c08615ba32be)</code></li> <li>Inventory: <code>&lt;remote host IP&gt; ansible_ssh_user=\"root\" ansible_ssh_private_key_file=\"&lt;path/to/your/private/key&gt;\"</code></li> </ul> </li> </ul>"},{"location":"getting_started/#5-deploying-galaxy-kickstart-behind-a-proxy","title":"5. Deploying galaxy-kickstart behind a proxy","text":"<p>See How can I set up GalaxyKickStart behind a proxy?</p>"},{"location":"installing_tools_and_workflows/","title":"Installing tools and workflows","text":"<p>This playbook includes the ansible-galaxy-tools role which can be used to install tools and workflows into galaxy instances using the bioblend API.</p> <p>Importantly, in the latest GalaxyKickStart version (<code>v20.05</code>), tool installation is performed using a separate run of <code>ansible-playbook</code>, typically:</p> <pre><code># these steps have should have already been performed\n\n# ansible-galaxy install -r requirements_roles.yml -p roles/\n# ansible-playbook -i inventory_files/galaxy-kickstart galaxy.yml\n\nansible-playbook -i inventory_files/galaxy-kickstart galaxy_tool_install.yml\n</code></pre> <p>Note that this is during the galaxy_tool_install.yml ansible play that a Galaxy admin user account is created with the credentials admin@galaxy.org:artbio2020</p>"},{"location":"installing_tools_and_workflows/#creating-a-tool_listyml-file","title":"Creating a tool_list.yml file","text":"<p>Before running the <code>galaxy_tool_install.yml</code> playbook script as shown above, you need to prepare a <code>tool_list.yml</code> file with a list of tools in yaml format and with the following example content:</p> <pre><code>tools:\n- name: blast_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: blastx_to_scaffold\n  owner: drosofff\n  revisions:\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n- name: bowtie2\n  owner: devteam\n  revisions:\n  - 019c2a81547a\n  tool_panel_section_label: Metavisitor\n  tool_shed_url: https://toolshed.g2.bx.psu.edu/\n</code></pre> <p>If the <code>revisions</code> key is empty, the latest available in the Galaxy toolshed revision will be installed.  </p> <p>The <code>tool_panel_section_label</code> key sets the tool panel section where the tools will show up in the Galaxy tool bar.</p> <p>Another example of a a tool list can be found in here</p>"},{"location":"installing_tools_and_workflows/#obtaining-a-tool_listyml-file-from-a-running-galaxy-server","title":"Obtaining a tool_list.yml file from a running Galaxy server","text":"<p>You can also retrieve the list of tools running in a specific Galaxy instance using the ephemeris script <code>workflow-to-tools</code>.</p> <ol> <li>First Install ephememeris using pip     <pre><code>pip install ephemeris\n</code></pre></li> <li>This will bring several scripts in your pip environment:     <pre><code>run-data-managers --help\nshed-tools install --help\nshed-tools update --help\nworkflow-install --help\nsetup-data-libraries --help\nget-tool-list --help\nworkflow-to-tools --help\n</code></pre></li> <li>Use the ephemeris <code>get-tool-list</code> to retrieve a yml list of tools installed in the Galaxy server using the command:     <pre><code>get-tool-list -g https://usegalaxy.org -u &lt;main galaxy username&gt; -p &lt;user password&gt; --get_data_managers -o main_tools_list.yml\n</code></pre></li> </ol>"},{"location":"installing_tools_and_workflows/#obtaining-a-tool_listyml-file-from-a-workflowga-galaxy-file","title":"Obtaining a tool_list.yml file from a workflow.ga galaxy file.","text":"<p>You can also retrieve a list of tools used in one or more workflow galaxy files (.ga extension).</p> <p>These .ga files can be obtain from Galaxy server instances (menu \"download workflow file\") or other repositories</p> <ol> <li>Use the ephemeris <code>workflow-to-tools</code> to retrieve a yml list of tools using the command:     <pre><code>workflow-to-tools -w &lt;Galaxy-Workflow-File.ga&gt; -l &lt;menu_label&gt; -o &lt;tool_list.yml&gt;\n</code></pre></li> </ol>"},{"location":"installing_tools_and_workflows/#adding-a-tool_listyml-file-to-a-group_variable-files","title":"Adding a tool_list.yml file to a group_variable files","text":"<p>Group variable files are in the group_vars directory.</p> <p>If you would like to install tools, you need to reference the tool_list.yml in the group variable file.</p> <p>We typically place additional files in the <code>extra-files/&lt;hostname&gt;/&lt;hostname&gt;_tool_list.yml</code> file.</p> <p>For instance, if you would like to add tools to a group that is called metavisitor, edit <code>group_vars/metavisitor</code> and add these lines:</p> <pre><code>install_tools: true\ngalaxy_tools_tool_list: \"extra-files/metavisitor/metavisitor_tool_list.yml\"\n</code></pre>"},{"location":"installing_tools_and_workflows/#installing-workflows","title":"Installing workflows","text":"<p>You can also add workflows in the Galaxy server modified by playbook script galaxy_tool_install.yml.</p> <p>As with tools, place the workflows in <code>extra-files/&lt;hostname&gt;/&lt;hostname&gt;&lt;workflow_name&gt;.ga</code> and add these lines to the corresponding group_var file:</p> <pre><code>galaxy_tools_install_workflows: true\ngalaxy_tools_workflows:\n  - \"extra-files/metavisitor/my_workflow_1.ga\"\n  - \"extra-files/metavisitor/my_workflow_2.ga\"\n  - \"extra-files/metavisitor/my_workflow_3.ga\"\n</code></pre>"},{"location":"installing_tools_and_workflows/#running-the-playbook","title":"Running the playbook","text":"<p>As mentioned earlier, after these preparation steps, you can run the playbook script <code>galaxy_tool_install.yml</code> with an inventory file that maps your target machine to the metavisitor group (in this example).</p> <p>If the target is localhost, your inventory file should look like this:</p> <pre><code>[metavisitor]\nlocalhost\n</code></pre> <p>then run the playbook like so:</p> <pre><code>ansible-playbook -i inventory_files/galaxy-kickstart galaxy_tool_install.yml\n</code></pre>"},{"location":"metavisitor/","title":"Metavisitor","text":"<p>Metavisitor is a set of Galaxy tools and workflows to detect and reconstruct viral genomes from complex deep sequence datasets.</p> <p>Documentation on Metavisitor installation using GalaxyKickStart is available in theMetavisitor manual</p>"}]}